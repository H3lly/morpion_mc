#! /usr/bin/python3

import socket, sys, threading

connexions_clients = {} # dictionaire des connexions clients


class ThreadClient(threading.Thread):
    # dérivation d'un objet thread pour gérer la connexion avec un client
    def __init__(self, connexion):
        threading.Thread.__init__(self)
        self.connexion = connexion

    def run(self):
        # Dialogue avec le client :
        nom = self.getName()

        while 1:
            message_client = self.connexion.recv(1024)
            if message_client.upper() == "FIN" or message_client == "":
                break
            message = "{}> {}".format(nom, message_client)
            print(message)
            # Faire suivre le message à tous les autres clients
            for cle in connexions_clients:
                if cle != nom: # ne pas envoyer à l'émetteur
                    connexions_clients[cle].send(message)

        # Fermeture de la connexion :
        self.connexion.close() # couper la connexion côté serveur
        del connexions_clients[nom] # supprimer son entrée dans le dictionnaire
        print("Client {} déconnecté.".format(nom))

def serveur():

    # Création du socket :
    connexion_principale = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connexion_principale.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    # Liaison du socket à une adresse précise
    try:
        connexion_principale.bind((HOTE, PORT))
    except socket.error:
        print("La liaison du socket à l'adresse choisie a échoué.")
        sys.exit()

    # Attente de la requete de connexion d'un client :
    print("Serveur pret, en attente de requetes ...")
    connexion_principale.listen(5)

    # Prise en charge des connexions demandées par les clients :
    while 1:        
        # Etablissement de la connexion :
        connexion, adresse = connexion_principale.accept()

        # Création d'un nouvel objet thread pour gérer la connexion :
        th = ThreadClient(connexion)
        th.start()

        # Mémoriser la connexion dans le dictionnaire :
        id = th.getName()
        connexions_clients[id] = connexion
        print("Client {} connecté, adresse IP {}, port {}.".format(id, adresse[0], adresse[1]))
 
        # Dialogue avec les clients
        connexion.send(b"Vous etes connecte. Envoyez vos messages.")


def client():
    # 1) création du socket :
    connexion_au_serveur = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 2) Envoi d'une requete de connexion au serveur :
    try:
        connexion_au_serveur.connect((HOTE, PORT))
    except socket.error:
        print("La connexion a échoué.")
        sys.exit()
    print("Connexion établie avec le serveur.")

    # 3) Dialogue avec le serveur :    
    while 1:
        message_serveur = connexion_au_serveur.recv(1024)
        connexion_au_serveur.send(message_serveur)


    # 4) Fermer la connexion :
    print("Fin de la connexion")
    connexion_au_serveur.close()




PORT = 1254
if len(sys.argv) < 2:
    HOTE = ''
    serveur()
else:
    HOTE = sys.argv[1]
    client()
